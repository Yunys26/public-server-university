{"version":3,"sources":["components/Header/index.jsx","components/Main/Table/TableStudents.jsx","components/Main/index.jsx","components/NavBar/index.jsx","App.js","serviceWorker.js","store/sliceStore/mainSlice.js","store/sliceStore/tableSlice.js","store/index.js","index.js"],"names":["Header","AppBar","position","Toolbar","Grid","container","spacing","item","xs","sm","md","lg","xl","Fab","color","variant","TableStudents","React","useState","studentsData","setStudentsData","page","setPage","rowsPerPage","setRowsPerPage","useEffect","axios","get","then","res","data","catch","error","console","log","Paper","TableContainer","style","marginTop","Table","TableHead","TableRow","TableCell","TableBody","slice","map","index","id","name","second_name","surname","study_group_id","TableFooter","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","value","labelRowsPerPage","Main","exact","path","NavBar","App","strict","Container","disableGutters","maxWidth","Boolean","window","location","hostname","match","mainSlice","createSlice","initialState","reducers","extraReducers","tableSlice","rootReducer","combineReducers","main","table","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","thunk","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOA6CeA,EAnCA,WAEX,OACI,iCACI,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAG,OAAOC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAG,OAA7C,SACI,cAACC,EAAA,EAAD,CAAKC,MAAM,YAAYC,QAAQ,WAA/B,gEAIJ,cAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAG,OAAOC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAG,OAA7C,SACI,cAACC,EAAA,EAAD,CAAKC,MAAM,YAAYC,QAAQ,WAA/B,4EAIJ,cAACX,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAG,OAAOC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAG,OAA7C,SACI,cAACC,EAAA,EAAD,CAAKC,MAAM,YAAYC,QAAQ,WAA/B,gF,yGCgFbC,EA5FO,WAAO,IAAD,EAEgBC,IAAMC,SAAS,IAF/B,mBAEjBC,EAFiB,KAEHC,EAFG,OAGAH,IAAMC,SAAS,GAHf,mBAGjBG,EAHiB,KAGXC,EAHW,OAIcL,IAAMC,SAAS,IAJ7B,mBAIjBK,EAJiB,KAIJC,EAJI,KAsBxB,OAPAP,IAAMQ,WAAU,WACyBC,IAAMC,IAAI,kCAC1CC,MAAK,SAACC,GAAD,OAAST,EAAgBS,EAAIC,SAClCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAEjC,IACHC,QAAQC,IAAIf,GAER,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAgBC,MAAO,CAAEC,UAAW,MAApC,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,iBAGA,cAACA,EAAA,EAAD,yDAGA,cAACA,EAAA,EAAD,iCAGA,cAACA,EAAA,EAAD,+DAGA,cAACA,EAAA,EAAD,uFAKR,cAACC,EAAA,EAAD,UACKxB,EAAayB,MAAMvB,EAAOE,EAAaF,EAAOE,EAAcA,GAAasB,KAAI,WAAqDC,GAArD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,eAAnC,OAC1E,eAACV,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACKK,IAEL,cAACL,EAAA,EAAD,UACKQ,IAEL,cAACR,EAAA,EAAD,UACKM,IAEL,cAACN,EAAA,EAAD,UACKO,IAEL,cAACP,EAAA,EAAD,UACKS,YAKjB,cAACC,EAAA,EAAD,UACI,cAACX,EAAA,EAAD,UACI,cAACY,EAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,MAAOpC,EAAaqC,OACpBjC,YAAaA,EACbF,KAAMA,EACNoC,aAnEH,SAACC,EAAOC,GAC7BrC,EAAQqC,IAmEgBC,oBAhEI,SAACF,GAC7BlC,GAAgBkC,EAAMG,OAAOC,OAC7BxC,EAAQ,IA+DgByC,iBAAiB,qK,QCnElCC,EAlBF,WACT,OACI,+BACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,WCMLC,EAZA,WACX,OACI,yB,SCyBOC,EAvBH,WAEV,OAGE,aAFA,CAEC,IAAD,UACE,cAAC,IAAD,CAAOC,QAAM,EAACH,KAAK,IAAnB,SACE,eAACI,EAAA,EAAD,CAAWC,gBAAgB,EAAOC,SAAS,KAA3C,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,Y,QCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCCSC,EAjBGC,YAAY,CAC1B/B,KAAM,OAENgC,aAAc,GAIdC,SAAU,GAIVC,cAAe,KAMnB,QCAeC,EAjBIJ,YAAY,CAC3B/B,KAAM,QAENgC,aAAc,GAIdC,SAAU,GAIVC,cAAe,KAMnB,QCdME,EAAcC,YAAgB,CAChCC,KAAMR,EACNS,MAAOJ,IAILK,EAAaC,YAAqB,CACpCC,gBAAgB,EAChBC,mBAAmB,EACnBC,OAAO,IAIEC,EAAQC,YAAe,CAChCC,QAASX,EACTI,WAAYA,I,QCZhBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,MAAK,SAAA4E,GACjCA,EAAaC,kB","file":"static/js/main.76d96d42.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Fab,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Grid container spacing={5}>\r\n                        <Grid item xs=\"auto\" sm={3} md={3} lg={3} xl=\"auto\">\r\n                            <Fab color=\"secondary\" variant=\"extended\">\r\n                                Сутденты\r\n                            </Fab>\r\n                        </Grid>\r\n                        <Grid item xs=\"auto\" sm={3} md={3} lg={3} xl=\"auto\">\r\n                            <Fab color=\"secondary\" variant=\"extended\">\r\n                                Аттестация\r\n                            </Fab>\r\n                        </Grid>\r\n                        <Grid item xs=\"auto\" sm={3} md={3} lg={3} xl=\"auto\">\r\n                            <Fab color=\"secondary\" variant=\"extended\">\r\n                                Пересдачи\r\n                            </Fab>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </header>\r\n    );\r\n};\r\n\r\n\r\nHeader.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {\r\n    Paper,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TablePagination,\r\n    TableFooter,\r\n    Button\r\n} from '@material-ui/core';\r\n\r\nconst TableStudents = () => {\r\n\r\n    const [studentsData, setStudentsData] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const responseGetDataStudent = () => axios.get('http://localhost:9999/students')\r\n            .then((res) => setStudentsData(res.data))\r\n            .catch(error => console.log(error));\r\n        responseGetDataStudent();\r\n    }, [])\r\n    console.log(studentsData)\r\n    return (\r\n        <Paper>\r\n            <TableContainer style={{ marginTop: '4%' }}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                ID\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Фамилия\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Имя\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Отчество\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Номер группы\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {studentsData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(({ id, name, second_name, surname, study_group_id }, index) => (\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {id}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {surname}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {second_name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {study_group_id}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 20]}\r\n                                count={studentsData.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                labelRowsPerPage=\"Студентов на одной странице:\"\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </Paper>\r\n    );\r\n};\r\n\r\n\r\nTableStudents.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default TableStudents;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TableStudents from './Table/TableStudents';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\nconst Main = () => {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <TableStudents />\r\n                </Route>\r\n            </Switch>\r\n        </main>\r\n    );\r\n};\r\n\r\n\r\nMain.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Drawer } from '@material-ui/core';\r\n\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav></nav>\r\n    );\r\n};\r\n\r\n\r\nNavBar.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Header from './components/Header';\r\nimport Main from './components/Main';\r\nimport NavBar from './components/NavBar';\r\nimport { Container } from '@material-ui/core';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    // disableGutters - добавляет отступы справо и слево\r\n    // maxWidth - отключает разметку по допустимой размерности\r\n    <Switch>\r\n      <Route strict path=\"/\">\r\n        <Container disableGutters={false} maxWidth=\"xl\">\r\n          <Header />\r\n          <NavBar />\r\n          <Main />\r\n        </Container>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\n\r\nApp.propTypes = {\r\n\r\n};\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst mainSlice = createSlice({\r\n    name: 'main',\r\n\r\n    initialState: {\r\n\r\n    },\r\n\r\n    reducers: {\r\n\r\n    },\r\n\r\n    extraReducers: {\r\n\r\n    }\r\n\r\n})\r\n\r\nexport default mainSlice.reducer;\r\n\r\n// export const { } = mainSlice.actions;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tableSlice = createSlice({\r\n    name: 'table',\r\n\r\n    initialState: {\r\n\r\n    },\r\n\r\n    reducers: {\r\n\r\n    },\r\n\r\n    extraReducers: {\r\n\r\n    }\r\n\r\n})\r\n\r\nexport default tableSlice.reducer;\r\n\r\n// export const { } = tableSlice.actions;","import { combineReducers, getDefaultMiddleware, configureStore } from \"@reduxjs/toolkit\";\r\nimport mainSlice from \"./sliceStore/mainSlice\";\r\nimport tableSlice from \"./sliceStore/tableSlice\";\r\n\r\n// Главный reducer\r\nconst rootReducer = combineReducers({\r\n    main: mainSlice,\r\n    table: tableSlice,\r\n});\r\n\r\n// Промежуточное ПО\r\nconst middleware = getDefaultMiddleware({\r\n    immutableCheck: false,\r\n    serializableCheck: false,\r\n    thunk: true,\r\n})\r\n\r\n// Конфигурация хранилища\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: middleware\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}